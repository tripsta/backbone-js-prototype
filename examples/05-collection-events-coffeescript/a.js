// Generated by CoffeeScript 1.4.0
(function() {
  var AddView, CustomerCollection, CustomerCollectionView, CustomerView, FilterAgeRange, FilterCityCollection, FilterCityCollectionView, FilterCityView, add_view, customerCollection, customerCollectionView, customers_data, filterCityCollection, filterCityCollectionView, originalCollection;

  customers_data = [
    {
      name: 'John',
      age: 22,
      city: 'London'
    }, {
      name: "Tim",
      age: 5,
      city: 'Paris'
    }, {
      name: "Ida",
      age: 26,
      city: 'London'
    }, {
      name: "Mary",
      age: 12,
      city: 'Athens'
    }, {
      name: "Jay",
      age: 33,
      city: 'New York'
    }, {
      name: "Kate",
      age: 24,
      city: 'New York'
    }, {
      name: "Elio",
      age: 25,
      city: 'Porto'
    }, {
      name: "Rob",
      age: 55,
      city: 'Berlin'
    }
  ];

  AddView = Backbone.View.extend({
    events: {
      'click .button_add': 'add'
    },
    initialize: function() {
      return this.render();
    },
    render: function() {
      var template;
      template = _.template($("#add_template").html(), {});
      return this.$el.html(template);
    },
    add: function() {
      this.collection.add({
        name: $('#new_name').val(),
        age: $('#new_age').val(),
        city: $('#new_city').val()
      });
      return window.originalCollection.reset(this.collection.models);
    }
  });

  CustomerView = Backbone.View.extend({
    events: {
      'click .button_remove': 'remove'
    },
    template: _.template($(".customer_template").html()),
    initialize: function() {},
    render: function() {
      this.$el.html(this.template(this.model.toJSON()));
      this.delegateEvents();
      return this;
    },
    remove: function() {
      return this.model.destroy();
    }
  });

  CustomerCollectionView = Backbone.View.extend({
    initialize: function() {
      return this.listenTo(this.collection, 'customer_collection::onCollectionChanged', this.render);
    },
    _renderOne: function(model) {
      var v;
      v = new CustomerView({
        model: model,
        tagName: 'li'
      });
      return this.$el.append(v.render().el);
    },
    render: function() {
      $(this.el).empty();
      return this.collection.each(this._renderOne, this);
    }
  });

  FilterCityView = Backbone.View.extend({
    events: {
      'change .filter_city_item': 'onItemChanged'
    },
    template: _.template($(".filter_city_template").html()),
    render: function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    },
    onItemChanged: function(event) {
      return this.model.set('checked', event.target.checked);
    }
  });

  FilterCityCollectionView = Backbone.View.extend({
    initialize: function() {
      return this.listenTo(this.collection, 'filterCity::change', this.render);
    },
    _renderOne: function(model) {
      var v;
      v = new FilterCityView({
        model: model,
        tagName: 'li'
      });
      return this.$el.append(v.render().el);
    },
    render: function() {
      var _this = this;
      $(this.el).empty();
      this.collection.each(this._renderOne, this);
      return $('.filter_city_item').change(function() {
        return _this.trigger('cityChanged');
      });
    }
  });

  CustomerCollection = Backbone.Collection.extend({
    initialize: function() {
      this.on('reset', this.onCollectionChanged, this);
      this.on('remove', this.onCollectionChanged, this);
      return this.on('add', this.onCollectionChanged, this);
    },
    filterByAge: null,
    filterByCity: null,
    applyFilters: function() {
      var cities, currentCollection, filtered,
        _this = this;
      currentCollection = this.clone();
      filtered = currentCollection.models;
      if (this.filterByAge) {
        filtered = currentCollection.filter(function(model) {
          return model.get('age') >= _this.filterByAge.min_age && model.get('age') <= _this.filterByAge.max_age;
        });
      }
      currentCollection.reset(filtered);
      if (this.filterByCity) {
        cities = _.map(this.filterByCity.filter(function(model) {
          return model.get('checked') === true;
        }), function(m) {
          return m.get('name');
        });
        filtered = currentCollection.filter(function(model) {
          return $.inArray(model.get('city'), cities) !== -1;
        });
      }
      return filtered;
    },
    onCollectionChanged: function() {
      return this.trigger('customer_collection::onCollectionChanged', this);
    }
  });

  FilterAgeRange = Backbone.Model.extend({
    initialize: function(collection) {
      this.collection = collection;
      return this.collection.on('reset', this.render, this);
    },
    min_age: null,
    max_age: null,
    render: function() {
      var _this = this;
      this.min_age = originalCollection.min(function(model) {
        return model.get("age");
      }).get('age');
      this.max_age = originalCollection.max(function(model) {
        return model.get("age");
      }).get('age');
      $('#age_slider').slider({
        range: true,
        min: this.min_age,
        max: this.max_age,
        values: [this.min_age, this.max_age],
        slide: function(event, ui) {
          var data;
          _this.min_age = ui.values[0];
          _this.max_age = ui.values[1];
          data = originalCollection.applyFilters();
          customerCollection.reset(data);
          return $("#age_display_range").val("" + _this.min_age + " - " + _this.max_age);
        }
      });
      return $("#age_display_range").val("" + this.min_age + " - " + this.max_age);
    }
  });

  FilterCityCollection = Backbone.Collection.extend({
    initialize: function(collection) {
      this.collection = collection;
      this.listenTo(this.collection, 'customer_collection::onCollectionChanged', this.onCollectionChanged);
      return this.on('change', this.onCityItemChanged);
    },
    onCityItemChanged: function(model, options) {
      var data;
      data = originalCollection.applyFilters();
      return customerCollection.reset(data);
    },
    onCollectionChanged: function() {
      return this.reload();
    },
    reload: function() {
      var cities,
        _this = this;
      cities = _.uniq(this.collection.pluck('city'));
      this.reset();
      $.each(cities, function(index, value) {
        return _this.add(new Backbone.Model({
          name: value,
          checked: true
        }), {
          silent: true
        });
      });
      return this.trigger('filterCity::change');
    }
  });

  $('.reset_filters').click(function() {
    window.customerCollection.reset(customers_data);
    window.filterAgeRange.render();
    return window.filterCityCollection.collection = originalCollection;
  });

  $('.reset_collection').click(function() {
    window.customerCollection.reset(customers_data);
    return window.originalCollection.reset(customers_data);
  });

  customerCollection = new CustomerCollection;

  customerCollection.reset(customers_data);

  originalCollection = customerCollection.clone();

  filterCityCollection = new FilterCityCollection(originalCollection);

  filterCityCollection.reload();

  window.filterAgeRange = new FilterAgeRange(originalCollection);

  window.filterAgeRange.render();

  originalCollection.filterByAge = window.filterAgeRange;

  originalCollection.filterByCity = filterCityCollection;

  customerCollectionView = new CustomerCollectionView({
    collection: customerCollection,
    el: $('ul.customers')[0]
  });

  add_view = new AddView({
    el: $("#add_container"),
    collection: customerCollection
  });

  filterCityCollectionView = new FilterCityCollectionView({
    collection: filterCityCollection,
    el: $('ul.filter_cities')[0]
  });

  customerCollectionView.render();

  filterCityCollectionView.render();

}).call(this);
